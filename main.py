# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4iKHsI8D-79dBmVVrI3c489i1F4yKiQ

# Simple User Database App with Gradio

#Gurpreet Singh

#GitHub Username: gurpreetsinghwsu

#edX Username: Gurpreet_15

#City and Country: Daejeon, South Korea

#Date: 15 November 2024
"""

# Import necessary libraries
from flask import Flask, request, jsonify
import sqlite3

# Initialize Flask app
app = Flask(__name__)

# Function to get database connection
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# Insert data into the database (dummy function for testing)
def insert_user(name, age):
    conn = get_db_connection()
    conn.execute('INSERT INTO users (name, age) VALUES (?, ?)', (name, age))
    conn.commit()
    conn.close()

# Retrieve data from the database
def get_users():
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users').fetchall()
    conn.close()
    return users

# Initialize database
conn = sqlite3.connect('database.db')
conn.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)')
conn.close()

!pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display, HTML

# Create form widgets
name_input = widgets.Text(description="Name:")
age_input = widgets.Text(description="Age:")
submit_button = widgets.Button(description="Submit")

output = widgets.Output()

# Define function to handle form submission
def on_submit_button_clicked(b):
    with output:
        output.clear_output()
        name = name_input.value
        age = age_input.value
        if name and age.isdigit():
            insert_user(name, int(age))
            print(f"Data saved! Name: {name}, Age: {age}")
        else:
            print("Please enter valid data.")
        name_input.value = ""
        age_input.value = ""

# Attach click event
submit_button.on_click(on_submit_button_clicked)

# Display form and output area
display(name_input, age_input, submit_button, output)

# Function to display users in the database
def display_users():
    users = get_users()
    if users:
        for user in users:
            print(f"ID: {user['id']}, Name: {user['name']}, Age: {user['age']}")
    else:
        print("No data available.")

# Call this function to display data
display_users()

!pip install --upgrade pip
!pip install gradio==3.29.0  # Use a stable version compatible with Colab

import sqlite3
import gradio as gr

# Step 1: Initialize the SQLite Database
# Create the database and a table for storing user data
conn = sqlite3.connect('database.db')
conn.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)')
conn.close()

# Step 2: Define Helper Functions for Database Operations

# Connect to the database
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# Insert a new user into the database
def insert_user(name, age):
    conn = get_db_connection()
    conn.execute('INSERT INTO users (name, age) VALUES (?, ?)', (name, age))
    conn.commit()
    conn.close()
    return f"Data saved! Name: {name}, Age: {age}"

# Retrieve all users from the database
def get_users():
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users').fetchall()
    conn.close()
    return [(user['id'], user['name'], user['age']) for user in users]

# Step 3: Define Gradio Functions for Adding and Displaying Users

# Function to add a user
def add_user(name, age):
    if not name or not age.isdigit():
        return "Please enter a valid name and numeric age."
    return insert_user(name, int(age))

# Function to display all users
def display_users():
    users = get_users()
    if users:
        return "\n".join([f"ID: {user[0]}, Name: {user[1]}, Age: {user[2]}" for user in users])
    else:
        return "No data available."

# Step 4: Create the Gradio Interface

with gr.Blocks() as demo:
    gr.Markdown("## Simple User Database App")

    with gr.Row():
        name_input = gr.Textbox(label="Name")
        age_input = gr.Textbox(label="Age")
        submit_button = gr.Button("Add User")

    output_message = gr.Textbox(label="Output Message")

    submit_button.click(add_user, [name_input, age_input], output_message)

    gr.Markdown("### All Users in the Database")
    display_button = gr.Button("Show Users")
    display_output = gr.Textbox(label="User List")
    display_button.click(display_users, inputs=[], outputs=display_output)

# Step 5: Launch the Gradio App
demo.launch()